-
 name: simd_vshff――
 inst: vshfw
 params:
 -
  intv8 va:
 -
  intv8 vb:
 -
  int8 Rc:
 -
  return intv8:
 desc: |
  返回值的八个32bit的数由Va和Vb装填，Va负责装填4个高32bit，Vb负责装填4个低32bit，具体如何装填由Rc说明：
  Rc的<30:28>指出vd的<255:224>来自Va的位置
  Rc的<26:24>指出vd的<223:192>来自Va的位置
  Rc的<22:20>指出vd的<191:160>来自Va的位置
  Rc的<18:16>指出vd的<159:128>来自Va的位置
  Rc的<14:12>指出vd的<127:96>来自Vb的位置
  Rc的<10:8>指出vd的<95:64>来自Vb的位置
  Rc的<6:4>指出vd的<63:32>来自Vb的位置
  Rc的<2:0>指出vd的<31:0>来自Vb的位置
  Va/Vb的位置（0~7）含义为，Va/Vb分成自然对界的8个32bit，位置为0表示第0个32bit（[31:0]），依次类推。
  示例：
  intv8 va,vb,vd;
  int rc = 0x12345670;
  vd = vshuffle（va, vb, rc）。
  含义是从高到低，vd的8个32bit分别来源于：
  0x1：va的第1个32bit；
  0x2：va的第2个32bit；
  0x3：va的第3个32bit；
  0x4：va的第4个32bit；
  0x5：vb的第5个32bit；
  0x6：vb的第6个32bit；
  0x7：vb的第7个32bit；
  0x0：vb的第0个32bit。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_vshff――
 inst: vshfw
 params:
 -
  doublev4 va:
 -
  doublev4 vb:
 -
  int8 Rc/#c:
 -
  return doublev48:
 desc: |
  返回值的四个64bit的数由Va和Vb装填，Va负责装填Vd的2个高64bit，Vb负责装填Vd的2个低64bit，具体如何装填由Rc/#c说明：
  Rc/#c的<7:6>指出vd的<255:192>来自Va的位置
  Rc/#c的<5:4>指出vd的<191:128>来自Va的位置
  Rc/#c的<3:2>指出vd的<127:64>来自Vb的位置
  Rc/#c的<1:0>指出vd的<63:0>来自Vb的位置
  Va/Vb的位置（0~3）含义为，Va/Vb分成自然对界的4个64bit，位置为0表示第0个64bit（[63:0]），依次类推。
  示例：以立即数操作数为例说明
  doublev4 va,vb,vd;
  vd = simd_shuffle(va, vb, 8’b01111000)
  含义是从高到低，vd的4个64bit分别来源于va的第1个64比特，va的第3个64bit，vb的第2个64bit，vb的第0个64bit。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_vshff――
 inst: vshfw
 params:
 -
  floatv4 va:
 -
  floatv4 vb:
 -
  int8 Rc/#c:
 -
  return floatv48:
 desc: |
  返回值的四个64bit的数由Va和Vb装填，Va负责装填Vd的2个高64bit，Vb负责装填Vd的2个低64bit，具体如何装填由Rc/#c说明：
  Rc/#c的<7:6>指出vd的<255:192>来自Va的位置
  Rc/#c的<5:4>指出vd的<191:128>来自Va的位置
  Rc/#c的<3:2>指出vd的<127:64>来自Vb的位置
  Rc/#c的<1:0>指出vd的<63:0>来自Vb的位置
  Va/Vb的位置（0~3）含义为，Va/Vb分成自然对界的4个64bit，位置为0表示第0个64bit（[63:0]），依次类推。
  示例：以立即数操作数为例说明
  doublev4 va,vb,vd;
  vd = simd_shuffle(va, vb, 8’b01111000)
  含义是从高到低，vd的4个64bit分别来源于va的第1个64比特，va的第3个64bit，vb的第2个64bit，vb的第0个64bit。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_loadr
 inst: vldr
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8 va:
 -
  [unsigned] int *addr:
 -
  b)	int256类型的装入:
 -
  [u]int256va:
 -
  [unsigned] int *addr:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  double *addr:
 -
  return a)	intv8类型的装入:
[u]intv8:
b)	int256类型的装入:
[u]int256va;:
c)	doublev4类型的装入:
doublev4;:
 desc: |
  扩展类型的装入，将32字节长度的数据从连续内存区域中装入到一个向量变量中，并进行行广播。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_loadc
 inst: vldc
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8 va:
 -
  [unsigned] int *addr:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  [unsigned] int *addr:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  double *addr:
 -
  return a)	intv8类型的装入:
[u]intv8//intv8类型的装入:
b)	int256类型的装入:
[u]int256va;:
c)	doublev4类型的装入:
doublev4;:
 desc: |
  扩展类型的装入，将32字节长度的数据从连续内存区域中装入到一个向量变量中，并进行列广播。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_loader
 inst: ldder
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  [unsigned] int *addr:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  [unsigned] int *addr:
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_loadr
 inst: vldr
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8 va:
 -
  [unsigned] int *addr:
 -
  b)	int256类型的装入:
 -
  [u]int256va:
 -
  [unsigned] int *addr:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  double *addr:
 -
  return a)	intv8类型的装入:
[u]intv8:
b)	int256类型的装入:
[u]int256va;:
c)	doublev4类型的装入:
doublev4;:
 desc: |
  扩展类型的装入，将32字节长度的数据从连续内存区域中装入到一个向量变量中，并进行行广播。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_loadc
 inst: vldc
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8 va:
 -
  [unsigned] int *addr:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  [unsigned] int *addr:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  double *addr:
 -
  return a)	intv8类型的装入:
[u]intv8//intv8类型的装入:
b)	int256类型的装入:
[u]int256va;:
c)	doublev4类型的装入:
doublev4;:
 desc: |
  扩展类型的装入，将32字节长度的数据从连续内存区域中装入到一个向量变量中，并进行列广播。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_loader
 inst: ldder
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  [unsigned] int *addr:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  [unsigned] int *addr:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  double *addr:
 -
  return a)	intv8类型的装入:
[u]intv8:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4;:
 desc: |
  扩展类型的装入并扩展。从存储器装载一个双精度浮点或长字（64位），同时写到向量寄存器Va的四个双精度浮点向量元素的位置，并进行行向广播。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_loadec
 inst: lddec
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8 va:
 -
  [unsigned] int *addr:
 -
  b)	int256类型的装入:
 -
  [u]int256va:
 -
  [unsigned] int *addr:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  double *addr:
 -
  return a)	intv8类型的装入:
[u]intv8:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4;:
 desc: |
  扩展类型的装入并扩展。从存储器装载一个双精度浮点或长字（64位），同时写到向量寄存器Va的四个双精度浮点向量元素的位置，并进行列向广播。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_getr
 inst: getr
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  读行通信缓冲，将缓冲中的向量读入向量寄存器中，缓冲执行读后清。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_getc
 inst: getc
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  读列通信缓冲，将缓冲中的向量读入向量寄存器中，缓冲执行读后清。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_putr
 inst: putr
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  向同行上目标从核发送数据，数据宽度为向量寄存器宽度。PUT可以点对点操作或广播操作，当广播时目标方至少一个满时停顿。Rb低4位有效，其中Rb[3]（或#dest[3]）为通信类型位，为0时表示点对点操作，则Rb[2:0]（或#dest[2:0]）是一个3位目标位向量，指示目标从核号；当Rb[3]（或#dest[3]）为1时表示广播操作，忽略Rb[2:0]位。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_putc
 inst: putc
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  向同列上目标从核发送数据，数据宽度为向量寄存器宽度。PUT可以点对点操作或广播操作，当广播时目标方至少一个满时停顿。Rb低4位有效，其中Rb[3]（或#dest[3]）为通信类型位，为0时表示点对点操作，则Rb[2:0]（或#dest[2:0]）是一个3位目标位向量，指示目标从核号；当Rb[3]（或#dest[3]）为1时表示
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_getr
 inst: getr
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  读行通信缓冲，将缓冲中的向量读入向量寄存器中，缓冲执行读后清。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_getc
 inst: getc
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  读列通信缓冲，将缓冲中的向量读入向量寄存器中，缓冲执行读后清。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_putr
 inst: putr
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  向同行上目标从核发送数据，数据宽度为向量寄存器宽度。PUT可以点对点操作或广播操作，当广播时目标方至少一个满时停顿。Rb低4位有效，其中Rb[3]（或#dest[3]）为通信类型位，为0时表示点对点操作，则Rb[2:0]（或#dest[2:0]）是一个3位目标位向量，指示目标从核号；当Rb[3]（或#dest[3]）为1时表示广播操作，忽略Rb[2:0]位。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_putc
 inst: putc
 params:
 -
  a)	intv8类型的装入:
 -
  [u]intv8va:
 -
  b)	int256类型的装入:
 -
  [u]int256 va:
 -
  c)	doublev4类型的装入:
 -
  doublev4 va:
 -
  d)	floatv4类型的装入:
 -
  floatv4 va:
 -
  return a)	intv8类型的装入:
[u]intv8va;:
b)	int256类型的装入:
[u]int256:
c)	doublev4类型的装入:
doublev4:
d)	floatv4类型的装入:
floatv4:
 desc: |
  向同列上目标从核发送数据，数据宽度为向量寄存器宽度。PUT可以点对点操作或广播操作，当广播时目标方至少一个满时停顿。Rb低4位有效，其中Rb[3]（或#dest[3]）为通信类型位，为0时表示点对点操作，则Rb[2:0]（或#dest[2:0]）是一个3位目标位向量，指示目标从核号；当Rb[3]（或#dest[3]）为1时表示广播操作，忽略Rb[2:0]位。
  simd_selldw―― 字向量选择装入运算
 inst: selldw
 params:
 -
  intv8 va:
 -
  intv8 Rb:
 -
  Int3 #c:
 -
  return intv8（c=0时有效）:
 desc: |
  根据#c，从Va指出的8个表内偏移中选择1个，与Rb中的首地址相加，得到访问LDM的地址；然后访问LDM，将查到的32bit数据写入硬件256b缓冲相应位置。如果#c为3’b0，访问LDM结束后会把硬件256b缓冲的结果写回Vd。
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
-
 name: simd_lookup――查表，完成四次字向量选择装入运算
 inst: selldw
 params:
 -
  intv8 va:
 -
  intv8 Rb:
 -
  intv8 vc:
 -
  return  desc: |
  生成8条查表指令：
  simd_selldw (va,b,7);
  simd_selldw (va,b,6);
  simd_selldw (va,b,5);
  simd_selldw (va,b,4);
  simd_selldw (va,b,3);
  simd_selldw (va,b,2);
  simd_selldw (va,b,1);
  vc=simd_selldw (va,b,0);
 header: "simd.h"
 cates: [SIMD, SIMD-arith, SIMD-int]
 tags: [CPE]
